dubbo 为了使得各层解耦，采用了url总线设计。我们通常的设计会把层与层之间的交互参数做成Model， 这样层与层之间沟通成本比较大，扩展起来比较麻烦。因此，Duboo把各层之间的通信都采用url的形式。比如注册中心启动时，参数url为：
registry://0.0.0.0:9090?codec=registry&transporter=netty
上面的url表示当前是注册中心，绑定到所有ip，端口是9090，解析器类型是register， 使用的底层网络通信快加是netty。

Dubbo启动过程：
Dubbo分为注册中心，服务提供者，服务消费者三个部分
注册中心启动过程：
	注册中心的启动过程，主要看两个类，RegistrySynchronizer，RegistryReceiver，两个类的初始化都是start。
	RegistrySynchronizer的start方法：
	1）把所有的配置load到内存；
	2）把当前注册中心信息保存到数据库；
	3）启动5个定时器
	  5个定时器的功能是：
 	    AutoRedirectTask， 自动重定向定时器。默认1小时运行一次。如果当前注册中心的连接数高于平均值的1.2被，则多出来的连接重定向到其他注册中心上，以达到注册中心集群的连接数均衡。
            DirtyCheckTask， 脏数据检查定时器。作用是：分别检查缓存provider，数据库provider， 缓存consumer， 数据库consumer的数据，清除脏数据；清理不存活的provider和consumer数据；对于缓存中中存在provider或者consumer而数据库中不存在，重新注册和订阅。
            ChangedClearTask， changes变更表的定时清理任务。作用是读取changes表，清楚过期数据。
            AlivedCheckTask， 注册中心存活状态定时检查，会定时更新registriez表的expire字段，yong'hu用户判断注册中心的存活状态。如果有新的注册中心，发送同步消息，将当前所有注册中心的地址通知到所有客户端。
            ChangedCheckTask， 变更检查定时器。检查changes表的变更，检查类型包括：参数覆盖变更，路由变更，服务消费者变更，权重变更，负责均衡变更。
        RegistryReceiver的start方法：启动注册中心服务。默认使用betty框架，绑定本机的9090端口。最后启动服务的过程是在Nettyserver来完成的，接收到消息时，抛开dubbo协议的解码器，调用类的顺序是：NettyHander=>NettyServer=>MultiMessageHandler=>HeartbeatHandler=>AllDispatcher=>DecodeHandler=>HeaderExchangeHandler=>RegistrReceiver=>RegistryValidator=>RegistryFailover=>RegistryExecutor

provier启动过程：
	provider启动过程是从ServiceConfig的export方法开始的，具体的步骤是：
	1）进行本地jvm的暴露，不开发任何端口，以提供injvm这种形式调用，这种调用只是本地调用，不涉及进程间通信
	2）调用RegistryProtocol的export。
	3）调用DubboProtocol的export，默认开始20880端口，用以提供接收consumer的远程调用服务。
	4）通过新建RemoteRegistry来建立与注册中心的连接。
	5）将服务地址注册到注册中心。
	6）去注册中心订阅自己的服务。
consumer启动过程:
	consumer的启动过程是ReferenceConfig的get方法进行的，具体的步骤是：
	1）通过新建RemoteRegistry来建立与注册中心的联系。
	2）新建RegistryDirectory并向注册中心订阅服务，RegistryDirectory用以维护注册中心获取的相关信息。
	3）创建代理类，发起consumer远程调用时，实际调用的是InvokerInvocationHander。




Dubbo内置支持如下6中集群模式：
   1、Failover Cluster模式，配置值为failover。这种模式是Dubbo集群容错默认的模式选择，调用失败时，会自动切换，重新尝试调用其他节点上可用的服务。对于一些幂等性操作可以使用该模式，如读操作，因为每次调用的副作用是相同的，所有可以选择自动切换并重试调用，对调用者完全透明。可以看到，如果重试调用必然会带来响应端的延迟，如果出现大量的重试调用，可能说明我们的服务提供方发布的服务有问题，如果网络延迟严重，硬件设备需要升级，程序算法非常耗时，等待，这就需要仔细检测排查了。
   2、Failfast Cluster模式，配置值为failfast。这种模式称为快速失败模式，调用只执行一次，失败则立即报错。这种模式适用于非幂等操作，每次调用的副作用是不同的，如写操作，比如交易系统我们要下订单，如果一次失败就应该让它失败，通常由服务消费方控制是否重新发起订单操作请求。
   3、Failsafe Cluster模式。配置值为failsafe， 失败安全模式，如果调用失败，则直接忽略失败的调用，并记录失败调用的日志文件，一遍后续审计。
   4、Failback Cluster模式，配置值为failback，失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作。
   5、Forking Cluster模式，配置值为forking， 并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。
   6、Broadcast Cluster模式，配置值为Broadcast，广播调用所有提供者，逐个调用，任意一台报错则报错，通常用于通知所有提供者更新缓存或者日志等本地资源信息。

Dubbo服务负载均衡
   Dubbo框架内置提供负载均衡的功能以及扩展接口，我们可以透明地扩展一个服务或服务集群，根据需要非常容易地增加/移除节点，提高服务的可伸缩性。Dubbo框架内置提供4中负载均衡策略，如下所示：
	Random LoadBalance：随机策略，配置值为random。 可以设置权重，有利于充分利用服务器资源，高配的可以设置权重大一些，低配的可以稍微小一些
	RoundRobin LoadBalance，轮询策略，配置值为roundrobin。
	LeastActive LoadBalance：配置值为leastactive。根据请求调用的次数，处理请求更慢的节点会受到更少的请求
	ConsistenHash LoadBalance，一致性hash策略。具体配置方法可以参考Dubbo文档，相同调用参数的请求会发送到同一个服务提供方的节点上，如果某个节点发生故障无法提供服务，则会基于一致性hash算法映射到虚拟节点上。



Dubbo ExtensionLoader(扩展点加载机制)
Dubbo 的扩展点加载从JDK标准的SPI service provider interface扩展点发现机制加强而来。
Dubbo 改进了JDK标准的SPI的一下问题：
  1、JDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用也加载，会很浪费资源
  2、如果扩展点加载失败，连扩展点的名称都拿不到。比如JDK标准的scriptEngine，通过getName获取脚本类型的名称，但如果RubyScriptEngine因为所依赖的jruby.jar不存在，导致RubyScriptEngine类加载失败，这个失败原因被吃掉了，和ruby对应不起来，当用户执行ruby脚本时，会报不支持ruby，而不是真正失败的原因。
  3、增加了对扩展点Ioc和AOP的支持，一个扩展点可以直接setter注入其他扩展点。
约定：
在扩展类jar保内，放置扩展点配置文件：META-INFO/dubbo接口全限定名，内容为：配置名=扩展实现类全限定名，多个实现类换行符分割。（注意：这个配置文件是放在你自己的jar包内，不是dubbo本事的jar包内，Dubbo会全ClassPath扫描所有jar包内同名的这个文件，然后进行合并）
扩展点使用单一实例加载，Cache在ExtensionLoad中。
  

