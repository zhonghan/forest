软件架构：
	What：软件架构是指在一定的设计原则基础上，从不同角度对组成系统的各部分进行搭配和安排，形成系统的多个结构而组成的架构
	软件架构设计就是从宏观上说明一套软件系统的组成和特性。
	软件架构设计是一系列有层次的决策
	Why：为什么要进行软件架构设计：业务需求层出不穷，软件系统越来越负责，参与的人越来越多；共性和特性的问题越来越多，技术发展日新月异
软件架构师是干什么的
	介于需求与开发的中间人 ->良好的沟通能力
	能够统领全局的大牛     ->良好的大局观
	能够将需求转换成技术   ->洞悉前沿与市场嗅觉
	能够为软件研发提供指导 ->见多识广的大牛
	需要全面思考软件系统方方面面面的问题 ->缜密地思考问题
	能够公关和搞定重要技术难题           ->公司可信赖的支柱
	
架构师的素质
全局思维：从业务、市场、到技术的实现；
          从软件的过去、现在、到未来
		  从外部客户、到内部研发
		  从软件研发、到硬件部署
		  从功能实现、到运行效率
战略思维：在所在行业的发展战略
          在业务领域的发展战略
		  在技术方向的发展战略
		  在潜在市场的发展战略
		  
前瞻思维：市场趋势的发展动向
          前沿技术的发展动向
		  竞争对手的发展动向
		  合作伙伴的发展动向
抽象思维：各业务需求：抽象成功能模块
          各项功能的实现：抽象成软件架构
逆向思维：假如不实现会怎么样？
          假如没搞定会怎么样？
		  假如没有它会怎么样？
		  假如延期会怎么样？
软件质量属性包括：
    运行期质量属性：
	    性能：
		安全性：
		易用性：
		持续可用性：
		可伸缩性
		可操作性
		可靠性
		健壮性（鲁棒性）
	开发期质量属性：
	    易理解性：
		可扩展性：
		可测试性：
		可维护性：
		可移植性：
		
如何进行视图法设计
  1、逻辑架构
      系统功能划分成哪些子系统，哪些模块
	  向什么用户提供什么样的功能
	  每个功能都是怎样的操作流程与分支
	  如何通过界面与用户交互
	  应当设计哪些类与界面
	  与哪些外部系统接口
  2、开发架构
	  分层结构设计
	  开发技术选项
	  模块划分
	  开发规范
	  软件质量属性
  3、数据架构
      数据是集中还是分布式存储
	  领域模型到数据表的转换
	  实体如何设计，充血模型和贫血模型
	  使用什么数据库，关系还是分关系
  4、运行架构
      同步or异步， 并发or串行
	  交互：对象间交互，状态转换
	  质量：安全，可靠，可伸缩
	  性能：影响时间；吞吐量，估算
  5、物理架构
       网络方面，网络拓扑，网络设备，安全机制
	   性能方面：可靠性，可伸缩性
	   部署方面：集中式还是分布式；组件部署
	   
软件架构设计误区：
	1、高开高走落不到实处
	2、理想与现实需要折中
	3、遗漏关键性约束与非功能性需求
	4、为虚无的未来买单而过度设计
	5、过早做出关键性决策
	6、客户说啥就是啥成为酱油哥
	7、埋头干活缺乏前瞻性
	8、架构设计还要考虑系统可测性
	9、架构设计不要企图一步到位
	
	

七大设计原则：
1、单一职责原则：一个类负责一项职责
2、依赖倒置原则：高层模块不应该依赖底层模块，二者都应该依赖器抽象；抽象不应该依赖细节，细节应该依赖抽象。即针对接口编程，不要针对实现编程
3、接口隔离原则：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少
4、低耦合、高内聚
5、开闭原则，对扩展开放，对修改关闭。
6、组合聚合复用原则，尽量使用组合和聚合、少用继承关系来达到复用的原则。

如何建设高可用系统
1、减少单点
2、减少依赖
3、消峰填谷
3、精准监控
4、无状态
5、容量规划
6、功能开关
7、设置超时
8、重试策略
9、异步调用
10、热点缓存
11、缓存容灾
12、系统分级
13、流量蓄洪
14、服务权重
15、依赖简化
16、弹性扩容
17、灰度和回滚
18、减少远程调用
19、熔断机制
20、运行时加载
21、代码扫描
22、自动备份
23、线上压测