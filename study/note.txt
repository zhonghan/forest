常见的web攻击手段
1、	XSS(cross site scripting) 跨站脚本攻击。
攻击手段：主要是在网页上的输入，系统接收后再显示在网页上时出现的问题。比如页面input框中数据<script>攻击脚本</script>, 之后页面要显示这个内容时，就会执行这段攻击脚本。 
防范：之所以会发生，是因为用户输入的数据变成了代码，因此我们需要对用户的输入进行HTML转译处理，将其中的“尖括号”，“单引号”，“双引号”之类的特殊字符进行编码。
<	&lt;
>	&gt;
‘	&amp;
“	&quot;

2、	CRSF（cross site request forgery）跨站请求伪造， 是一种对网站的恶意利用。
攻击原理：用户登录授信A网站情况下，攻击者在其他的网站上制造诱导连接，或图片等，而点击的请求实则是发送到了A网站，所以会带上用户cookie信息（其实无辜的用户还并不想发送这个请求给A网站，比如转账给其他人的操作）。
CSRF防御：
A．	将cookie设置为HttpOnly, 这样通过程序（如javascript脚本，Applet等）就无法读取到cookie信息，避免了攻击者伪造cookie的情况出现。
B．	增加token， CSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于cookie中，因此攻击者可以在不知道用户验证信息的情况下直接利用用户的cookie来通过安全验证。由此可见，低于CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且不存在于cookie中。鉴于此，系统开发可以在http请求中以菜蔬形式加入一个随机产生的token，并在服务端进行token校验，如果请求中没有token或者token内容不正确，则认为是csrf攻击而拒绝请求。例如在表单中增加隐藏域token（可以为一个session级别的），token的值有服务端产生，这样CSRF就无法得到这个token，从而无法进行CSRF攻击。
C．	通过Referer识别。
3、	SQL注入攻击
4、	文件上传攻击
A．	文件类型校验（检查文件头）
B．	验证文件大小
C．	对图片类型进行缩放，或者加水印（为了修改文件内容，防止恶意的可执行文件）
D．	上传次数限制。

5、	DoS攻击(Denial of Service) 拒绝服务攻击，利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。
6、	DDos(Distributed Denial of Service) 分布式拒绝服务攻击：攻击者借助公共网络，将数量庞大的计算机设备联合起来作为攻击平台，对一个或者多个目标发动攻击，从而达到瘫痪目标主机的目的。通常在攻击开始前，攻击者会提前控制大量的用户计算机，称之为“肉鸡”，并通过指令使大量的肉鸡在同一时刻对某个主机进行访问，从而达到瘫痪目标主机的目的。
a)	SYN Flood： 利用TCP协议三次握手的过程来攻击。攻击者伪造大量的IP地址给服务器发送SYN报文，但是由于伪造的IP地址不存在，也就不可能从客户端得到任何回应，服务端将维护一个非常大的半连接等待列表，并不断对这个列表的IP地址进行遍历和重视，占用了大量的系统资源。导致正常的SYN请求得不到资源处理。
b)	DNS Query Flood：请求大量伪造域名，并且通过伪造端口和客户端IP
7、	DNS Query Flood


Synchronized vs lock
Synchronized 反编译后前后会加上monitorenter 和monitorexit， 
ReentrantLock 相比Synchronized而言，Reentrantlock的等待是可以中断的。通过tryLock（timeout,unit）,可以尝试获得锁，并且制定等待时间。另一个特性是可以在构造reentrantLock时使用公平锁，公平锁指的是多个线程在等待同一个锁时，必须按照申请锁的先后顺序依次获得锁。Synchronized中的是非公平锁，默认情况下，ReentrantLock也是非公平的，但是可以在构造函数中制定使用公平锁。对ReentrantLock来说，还有一个十分使用的特性，它可以同时绑定多个condition条件，以实现更精细化的同步控制


架构：
	划分子系统原子： （1、2是架构本身考虑， 3、4是人的因素考虑）
1、	职责分离原则
2、	通用专用分离原则
3、	技能分离原则
4、	工作量均衡原则



JVM 类加载机制
加载class的方式：
1、	从本地系统中直接加载
2、	通过网络下载.class
3、	从zip,jar等归档文件中加载.class文件
4、	从专有数据库中加载
5、	将java源文件便以为.class文件
类加载过程包含了5个阶段
1、	加载
2、	验证
3、	准备
4、	解析
5、	初始化


一些设计的基本常识：
框架或者组件通常有两类客户，一个是使用者，另一个是扩展者。
API 是给使用者用的， 而SPI是给扩展者用的。
在设计时，尽量把它们隔离开，而不要混在一起，也就是说，使用者是看不到扩展者写的实现的，比如一个Web框架，他有一个API叫做Action，里面有一个execute方法，是给使用者来写业务逻辑的，然后，Web框架有一个SPI接口是给扩展者控制输出方式的，比如velocity模板输出是还是json输出等，如果这个web框架使用一个都继承action的velocityAction和一个JsonAction座位扩展方式，要用velocity模板输出的就继承VelocityAction，要用json输出就继承jsonAction，这就是API和SPI没有分离的反面例子，SPI接口混在api接口中，合理的方式是，有一个单独的Renderer接口，有VelocityRenderer和JsonRenderer实现，Web框架Action的输出转交给Renderer接口做渲染输出
1、	




Java GC
判断对象是否存活的方式一般有两种：
1、	引用计数：每一个对象有一个引用计数器，新增一个引用加一，引用释放计算器减一，计数为0时可以回收。此方法无法解决互相循环引用的问题。
2、	可达性分析：从GC roots开始向下搜索，搜索走过的路劲称为引用


Java 创建对象的4中方式：
1、	New
2、	Clone， 需要实现cloneable接口，调用super.clone()返回Object
3、	序列化， 使用ObjectInputSteam.readObject（）的方法。
4、	反射，通过clazz.getConstructor（）得到构造器 con，在通过con.newInstance()获得对象。


很可能问到的面试题：
1、	线程中断的方法， 三种：
a)	线程正常退出，即run方法执行完成了。
b)	使用Thread类的stop方法强行终止线程，这个方法已经过期了。这个方法可以停止非当前线程。thread.stop（），调用的是thread这个线程，而不是当前线程，非常暴力，容易导致数据不一致性。因为不知道什么时候回被停止掉，随时可能被停止掉。
c)	使用中断机制： interrupted（）与isInterrupted（）都是反映当前线程是否处于中断状态的。interrupted（）是静态方法，测试的是当前线程的中断状态，且这个方法会清楚中断状态。
d)	isInterrupted（）方法不是静态方法，不会清楚中断状态。
e)	interrupted（）与isInterrupted（）底层都是调用本地方法：private native boolean isInterrupted(boolean ClearInterrupted);前者的参数是true， 后者传入false。
f)	
2、	redis，
a)	丰富的数据类型：string,list,set, sorted set, hash
b)	持久化方式：AOF，RDB
c)	淘汰策略：voltile lru，从设置过期的数据集中挑选最近最少使用的数据淘汰， volatile ttl，从已设置过期时间的数据集中挑选即将过期的数据淘汰。 Volatitile random，从已设置过期时间的数据集中任意选择数据淘汰，allkeys lru，从数据集中选择最近最少使用的数据淘汰， allkeysRandom， 从数据集中任意选择数据淘汰， no enviction，禁止淘汰数据。
d)	master写内存快照，save命令调度rdbsave函数，会阻塞主线程的工作，当快照比较大时，对性能影响是非常大的，会间断性暂定服务，所以master最好不要写内存快照。
e)	master AOF持久化，AOF文件会不断增大，AOF文件过大会影响master重启的恢复速度。Master最好不要最任何持久化的工作，包括内存快照和AOF，特别是不要启动内存快照做持久化，如果数据比较关键，某个slave开启AOF备份数据，策略为每秒同步一次。
3、	 mq，
a)	ActiveMq持久化机制：对于queue类型的消息，将存储在broker中，但是一旦其中一个消费者完成消费，则立即删除这条消息。对于topic类型的消息，即使所有的订阅者都完成了消费，broker也不一定会马上删除无用消息，二十保留推送历史，之后会异步清除无用消息。而每个订阅者消费到了哪条消息的offset会记录在broker中，以免下次重复消费，因为消息是顺序消费，先进先出，所以只需要记录上次消费到哪里就可以了。
b)	Activemq_acks:用于存储订阅关系。如果是持久化topic，订阅者和服务器的订阅关系在这个表保存。主要字段为：
i.	Container：消息的destination
ii.	Sub_dest：如果是使用static集群，这个字段会有集群其他系统的信息
iii.	Client_ID：订阅者都必须有一个唯一的客户端id用以区分。
iv.	Sub_Name:订阅者名称
v.	Selector：选择器，可以选择只消费满足条件的消息。天剑可以自定义属性实现，可支持多属性and和or操作。
vi.	Last_acked_id:记录消费过的消息ID
Activemq_lock：在集群环境中才有用，只有一个broker可以获得消息，称为master其他的为slave,只有等master不可用是在可能称为下一个master，这个表用来记录那个broker是master。
Activemq_msgs：用于存储消息，queue和topic都存储在这个表中，主要字段如下：
	Id：自增的数据库主键
	Container:消息的destination
	Msgid_prod:消息发送者客户端的主键
		Msg_seq:发送消息的顺序，MSGID_PROD+MSG_SEQ可以组成JMS的MessageID
	Expiration:消息的过期时间，存储是19700101到现在的毫秒数。
	Msg:消息本体的java序列化对象的二进制数据
	Priority:优先级，从0到9，数值越大优先级越高
	
4、	 jvm， 
5、	spring源码，
6、	rpc框架
7、	多线程、
8、	分布式job、
9、	一致性hash，
10、	事务场景，10000找最小300个，
11、	手写单例模式，
12、	JVM如何调优、
13、	高并发策略
a)	传输层：大量用户请求，导致网络带宽和web服务器的io瓶颈。
b)	计算层：接收大量用户请求，将会造成业务服务器和业务支撑服务器的瓶颈。
c)	存储层：导致数据库和存储上的瓶颈。
针对上面讲造成系统高并发瓶颈，我们需要采用不同的技术手段解决。
从总体上开：
A．	首先需要解决网络带宽和web请求的高并发，需要合理的加大服务器和带宽投入，并且需要充分利用系统中软件、硬件的缓存机制，将能缓存的内容都进行缓存，减少计算层和存储层的压力。
B．	骑车需要对业务服务器和业务支撑服务器进行合理分层，并且采用并行计算和分布式算法对大量计算进行处理，并且在开发的过程中需要采用javaSDK并发包进行编码实现。
C．	存储层需要采用分布式文件服务和劣势存储服务器进行构建，支持海量数据的存放和读取，并且还要对关系型数据进行深层次的配置参数优化
D．	我们还需要清楚的认识，将来根据系统运行的状态以及平台中不同的业务场景循序渐进调整和优化。
E．	对大型系统来说，采用的技术是设计面非常广，从硬件到软件，编程语言，数据库，webserver，防火墙等各个领域都有了很搞笑的要求。在面对大量用户访问，高并发请求方面，基本的解决方案集中在这样几个环节：将会使用高性能的服务器，高性能数据库，高效率的编程语言，还有高性能的web容器。但是除了这几个方面，还没发根本解决面临的高负载和高并发问题。所以需要将计算和负载的压力分载到每个计算机上，使用不同的服务器集群组进行分布式并发计算，面对产生的压力，下面这张图清晰描述了，我们队系统中不同的计算瓶颈
15、	分布式锁：
16、	NIO原理：reactor，反射器， selector， channel， selectKeys， buffer
	NIO中的Selector封装了底层的系统调用，其中wakeup用于唤醒阻塞在select方法上的线程，它的实现很简单，在linux上就是创建一个管道并加入poll的fd集合，wakeup就是往管道里写一个字节，那么阻塞的poll方法有数据可读就立即返回。
17、	Xml解析
a)	Dom
b)	SAX
c)	JDOM
d)	DOM4J

分库分表：
分表，分库
分库又分表： 库=id /（库数量*单库表数量）， 表=id%（库数量*单库表数量）
例如库数量为64，单库表数量为：128， id=234234，   中间变量：234234/(64*128)=28， 则库路由到28/128=0,表路由到28*128=128


高可用：集群化、或者冗余+自动故障转移
1、客户端到反向代理的高可用，通过冗余nginx+keepalived来实现（相同的virtual ip）。
2、反向代理到站点的高可用，通过冗余站点+nginx自动探测故障，实现故障自动转移。
3、redis的缓存高可用，是通过冗余redis+sentinel哨兵机制来做存活性检查。
4、数据库高可用： mysql也可以使用keepalived来实现探测
高并发：水平扩展
1、反向代理瓶颈，可以通过dns轮询。
2、提升网络带宽
3、静态资源cdn；
4、缓存

zookeeper：
zk设计目的：为了减轻分布式应用程序所承担的协调任务，zk的目的就是提供一些工具集，用来建立安全处理局部故障的分布式应用。
zk是一个分布式小文件系统，并且被设计为高可用。通过选举算法和集群复制可以避免单点故障
由于zk是文件系统，所以即使所有的zk节点全部挂掉，数据也不会丢失，重启服务器之后，数据既可以恢复。
zk的节点更新时原子的。通过版本号，zk实现了更新的乐观锁。
zk集群的角色：leader负责进行投票的发起和决议，更新系统状态，follower用于接收客户端请求并向客户端返回结果，在选主过程中参与投票，observer可以接收客户端请求，将写请求转发给leader。但Observer不参与投票，只同步leader状态。
每个zk 的znode有3部分组成：
	1、stat：状态信息，版本信息，权限信息
	2、data：数据
	3、children：子节点。
znode是客户端访问zk的主要实体，包含如下特性：
	1、watches：客户端可以在节点上设置watch，当节点状态发送改变时将会触发watch所对应的操作。当watch被触发时，zk将向客户端发送且仅发送一条通知，因为watch只能被触发一次。
	2、数据访问：
zk的9个基本操作：
1、create
2、delete
3、exists
4、setdata
5、getdata
6、getChildren
7、getACL
8、SETACL
9、sync
读操作exists、getChildren、getData都被设置了watch，并且这些watch都由写操作来触发：create、delete、setData，ACL操作不参与watch。
一个成功的setData操作将触发Znode的数据watch
一个成功的create或delete操作将触发Znode的数据watch以及孩子watch。
	



CMS(concurrent mark sweep)收集器是一种以获得最短回收停顿时间为目标的收集器。目前很大一部分的java应用都集中在互联网站后B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，已给用户带来较好的体验。
CMS是基于“标记 清楚”算法实现的，它的运作过程相对复杂一些，整个过程分为4个不走，包括：
初始标记：
并发标记：
重新标记：
并发请求：
其中，初始标记和重新标记需要stop the world，初始标记仅仅是标记一下GC roots能直接关联到的对象，速度很快，并发标记阶段就是进行GCroot tracing的过程，而重新标记极端则是为了修正并发标记期间，因用户持续运作而导致标记产生变动的那一部分对象标记记录。这个阶段的停顿时间一般比初始标记稍长一些，但远比并发标记时间短。由于整个过程中耗时最长的并发标记和并发清除中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过是与用户线程一起并发执行。老年代收集器

Ibatis源码解读：
核心接口：
SqlMapExecutor  该接口是对SQL操作行为的抽象，提供了SQL单条执行和批处理涉及的所有操作方法。
SqlMapTransactionManager 该接口是对事务行为的抽象，提供了事务执行过程中的涉及的所有方法。
SqlMapClient 该接口定位是SQL执行客户端，是线程安全的，用于处理多个线程的sql执行。它继承了上面两个接口，这意味着该接口具有SQL执行、批处理和事 务处理的能力，如果你拥有该接口的实现类，意味着执行任何SQL语句对你来说是小菜一碟。该接口的核心实现类是SqlMapClientImpl。
SqlMapSession 该接口在继承关系上和SqlMapClient一致，但它的定位是保存单线程sql执行过程的session信息。该接口的核心实现类是SqlMapSessionImpl。
MappedStatement  该接口定位是单条SQL执行时的上下文环境信息，如SQL标识、SQL、参数信息、返回结果、操作行为等。
ParameterMap/ResultMap  该接口用于在SQL执行的前后提供参数准备和执行结果集的处理。
SqlMapExecutorDelegate 他是一个执行代理类，在ibatis框架中地位非常重要，因为他耦合了用户端的操作行为和执行环境，他持有执行操作的所需要的所有数据，同时管理着执行操作依赖的环境。


java类初始化顺序
1、父类static block
2、子类static block
3、父类成员变量赋值
4、父类constructor
5、子类成员变量赋值
6、子类constructor


LinkedList remove(Object)的复杂度 ， 由于linkedList内部维护一个entry的双向链表，需要根据传入的object找到该entry，才能delete，所以复杂度为O(n),并不是O(1)

Java Lock精华：
JAVA LOCK 总体来说关键要素主要包括3点：
1、unsafe.compareAndSwap
2、unsafe.park()和unsafe.unpark()
3、单向链表结构或者存储线程的数据结构
第1点保证了锁的原子性，相当于一个锁是否正在被使用的标记，并且比较和设置这个标记的操作室原子的（硬件提供的swap和test_and_set指令，单CPU下同一个指令的多个指令周期不可中断，SMP中通过锁总线支持上诉两个指令的原子性）
第2点：主要将未得到


DB index:
执行计划：
List的排序， 三种
大数据，去重：
如何管理大量链接， 超时处理， 用什么数据结构
分布式缓存设计，分布式数据库设计。











